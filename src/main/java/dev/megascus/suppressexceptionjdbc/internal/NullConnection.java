/*
 * Copyright 2019 megascus
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package dev.megascus.suppressexceptionjdbc.internal;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Collections;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import dev.megascus.suppressexceptionjdbc.SEDriver;

/**
 * @author megascus
 */
public class NullConnection implements Connection {

	private final String url;
	private final SEDriver d;

	public NullConnection(SEDriver d, String url) {
		this.d = d;
		this.url = url;
	}

	@Override
	public Statement createStatement() {
		return new NullStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql) {
		return new NullPreparedStatement(this);
	}

	@Override
	public CallableStatement prepareCall(String sql) {
		return new NullCallableStatement(this);
	}

	@Override
	public String nativeSQL(String sql) {
		return sql;
	}

	@Override
	public void setAutoCommit(boolean autoCommit) {
	}

	@Override
	public boolean getAutoCommit() {
		return false;
	}

	@Override
	public void commit() {
	}

	@Override
	public void rollback() {
	}

	@Override
	public void close() {
	}

	@Override
	public boolean isClosed() {
		return true;
	}

	@Override
	public DatabaseMetaData getMetaData() {
		return new NullDatabaseMetaData(d, this, url);
	}

	@Override
	public void setReadOnly(boolean readOnly) {
	}

	@Override
	public boolean isReadOnly() {
		return true;
	}

	@Override
	public void setCatalog(String catalog) {
	}

	@Override
	public String getCatalog() {
		return null;
	}

	@Override
	public void setTransactionIsolation(int level) {
	}

	@Override
	public int getTransactionIsolation() {
		return Connection.TRANSACTION_NONE;
	}

	@Override
	public SQLWarning getWarnings() {
		return null;
	}

	@Override
	public void clearWarnings() {
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency) {
		return new NullStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) {
		return new NullPreparedStatement(this);
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) {
		return new NullCallableStatement(this);
	}

	@Override
	public Map<String, Class<?>> getTypeMap() {
		return Collections.emptyMap();
	}

	@Override
	public void setTypeMap(Map<String, Class<?>> map) {
	}

	@Override
	public void setHoldability(int holdability) {
	}

	@Override
	public int getHoldability() {
		return ResultSet.CLOSE_CURSORS_AT_COMMIT;
	}

	@Override
	public Savepoint setSavepoint() {
		return NullSavepoint.INSTANCE;
	}

	@Override
	public Savepoint setSavepoint(String name) {
		return NullSavepoint.INSTANCE;
	}

	@Override
	public void rollback(Savepoint savepoint) {
	}

	@Override
	public void releaseSavepoint(Savepoint savepoint) {
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
		return new NullStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) {
		return new NullPreparedStatement(this);
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) {
		return new NullCallableStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
		return new NullPreparedStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) {
		return new NullPreparedStatement(this);
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) {
		return new NullPreparedStatement(this);
	}

	@Override
	public Clob createClob() {
		return NullClob.INSTANCE;
	}

	@Override
	public Blob createBlob() {
		return NullBlob.INSTANCE;
	}

	@Override
	public NClob createNClob() {
		return NullNClob.INSTANCE;
	}

	@Override
	public SQLXML createSQLXML() {
		return NullSQLEXML.INSTANCE;
	}

	@Override
	public boolean isValid(int timeout) {
		return false;
	}

	@Override
	public void setClientInfo(String name, String value) throws SQLClientInfoException {
	}

	@Override
	public void setClientInfo(Properties properties) throws SQLClientInfoException {
	}

	@Override
	public String getClientInfo(String name) {
		return null;
	}

	@Override
	public Properties getClientInfo() {
		return new Properties();
	}

	@Override
	public Array createArrayOf(String typeName, Object[] elements) {
		return NullArray.INSTANCE;
	}

	@Override
	public Struct createStruct(String typeName, Object[] attributes) {
		return new NullStruct(typeName, attributes);
	}

	@Override
	public void setSchema(String schema) {
	}

	@Override
	public String getSchema() {
		return null;
	}

	@Override
	public void abort(Executor executor) {
	}

	@Override
	public void setNetworkTimeout(Executor executor, int milliseconds) {
	}

	@Override
	public int getNetworkTimeout() {
		return -1;
	}

	@Override
	public <T> T unwrap(Class<T> iface) {
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) {
		return false;
	}

}
